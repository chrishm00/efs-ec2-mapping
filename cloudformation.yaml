AWSTemplateFormatVersion: '2010-09-09'
Description: Automated EFS and EC2 Instance Relationship Identification System with Single Execution

Parameters:
  EFSDiscoveryOption:
    Type: String
    Description: "Choose between 'All' to discover all EFS or 'Specific' to provide specific EFS IDs"
    AllowedValues:
      - All
      - Specific
  SpecificEFSIds:
    Type: CommaDelimitedList
    Description: "Comma-separated list of specific EFS IDs (only if EFSDiscoveryOption is 'Specific')"
    Default: ""
  EFSIdsS3Path:
    Type: String
    Description: "S3 path to a file containing EFS IDs (optional, for large lists)"
    Default: ""
  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: The VPC ID where the EFS and EC2 instances are located
  LambdaCodeS3Bucket:
    Type: String
    Description: S3 bucket containing the Lambda function code
  LambdaCodeS3Key:
    Type: String
    Description: S3 key for the Lambda function code ZIP file
  ResultsS3Bucket:
    Type: String
    Description: S3 bucket to store the analysis results
  EventBridgeRuleName:
    Type: String
    Description: "Name of the EventBridge rule"
    Default: "StaticEventBridgeRule"

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:StartQuery
                  - logs:GetQueryResults
                  - logs:StopQuery
                  - ec2:DescribeInstances
                  - ec2:DescribeVpcs
                  - ec2:DescribeSubnets
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateFlowLogs
                  - ec2:DeleteFlowLogs
                  - ec2:DescribeFlowLogs
                  - ec2:DescribeTags
                  - elasticfilesystem:DescribeFileSystems
                  - elasticfilesystem:DescribeMountTargets
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                  - iam:PassRole
                  - events:DisableRule
                Resource: "*"

  ComplianceCheckerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "ComplianceCheckerLambda-${AWS::StackName}"
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: !Ref LambdaCodeS3Key
      Runtime: python3.8
      Timeout: 600
      MemorySize: 256
      Environment:
        Variables:
          EFS_DISCOVERY_OPTION: !Ref EFSDiscoveryOption
          SPECIFIC_EFS_IDS: !Join [",", !Ref SpecificEFSIds]
          EFS_IDS_S3_PATH: !Ref EFSIdsS3Path
          RESULTS_S3_BUCKET: !Ref ResultsS3Bucket
          CLOUDWATCH_LOG_GROUP: !Ref VPCFlowLogsLogGroup
          EVENTBRIDGE_RULE_NAME: !Ref EventBridgeRuleName

  VPCFlowLogsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/vpc/flowlogs/${AWS::StackName}'
      RetentionInDays: 14

  FlowLogsIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: VPCFlowLogPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceId: !Ref VPCID
      ResourceType: VPC
      TrafficType: ALL
      LogDestinationType: cloud-watch-logs
      LogDestination: !GetAtt VPCFlowLogsLogGroup.Arn
      DeliverLogsPermissionArn: !GetAtt FlowLogsIamRole.Arn
      LogFormat: "${vpc-id} ${subnet-id} ${instance-id} ${interface-id} ${srcaddr} ${dstaddr} ${dstport} ${protocol} ${log-status}"

  StaticEventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Ref EventBridgeRuleName
      Description: "Initial trigger to invoke Lambda function after delay"
      ScheduleExpression: "rate(3 minutes)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt ComplianceCheckerLambda.Arn
          Id: "ComplianceCheckerLambdaInitialTarget"

  InitialTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ComplianceCheckerLambda.Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt StaticEventBridgeRule.Arn

Outputs:
  ComplianceCheckerLambdaArn:
    Value: !GetAtt ComplianceCheckerLambda.Arn
    Description: "ARN of the compliance checker Lambda function"